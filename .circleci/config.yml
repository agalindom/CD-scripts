# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Command section (skipped)
commands:
  destroy_environment:
    description: Destroy stack in case of failure (rollback)
    steps:
      - run: 
          name: Destroy Environment
          command: |
            aws cloudformation delete-stack \
            --stack-name prod-${CIRCLE_WORKFLOW_ID} \
            --region=us-west-2
          when: on_fail

# Use a package of configuration called an orb. (skipped)

# Create job
jobs:
  # Job for infrastructure creation
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create backend infrastructure
          command: |
            cd .circleci/Infrastructure_creation
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}

  # Job for ansible and server creation
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - add_ssh_keys: 
          fingerprints: 
            - 1d:99:a8:fe:f8:c2:95:d9:94:88:b9:60:bb:73:e3:70
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            ansible-playbook main-remote.yml -i inventory
    
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    environment: 
      URL: "DNS-server:3000/"
    steps:
      - checkout
      - run: apk add --update curl
      - run:
          name: Test if website is up
          command: |
            if curl -s --head $URL
            then
              echo Website is up!
            else
              echo Website not found!
            fi
  
  rollback:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: return 1
      - destroy_environment 

            
# Orchestrate or schedule a set of jobs
workflows:
  #  Name the workflow "welcome"
  my-workflow:
    # Run the welcome/run job in its own container
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires: [create_infrastructure]
      - smoke-test:
          requires: [configure_infrastructure]
      - rollback:
          requires: [smoke-test]

